void merge(int arr1[],int arr2[],int n,int m)
{
int i=0,j=0,k=0;
while(i<=n&&j<=m)
{
if(arr1[i]<arr[2])
arr3[k++]=arr[i++];
else
arr3[k++]=arr[j++];
}
for(;i<=n;i++)
arr3[k++]=arr[i];
for(;j<=n;j++)
arr3[k++]=arr[j];
for(int z=0;z<n;z++) arr1[z]=arr3[l++];
for(int z=0;z<m;z++) arr2[z]=arr3[l++];
// Now using without ant extra space
int nextGap(int gap)
{   if (gap <= 1) return 0;  
return (gap / 2) + (gap % 2);  
    
} public:  void merge(int arr1[], int arr2[], int n, int m) 
{   int i, j, gap = n + m;  
for (gap = nextGap(gap); gap > 0; gap = nextGap(gap))
{   for (i = 0; i + gap < n; i++) 
if (arr1[i] > arr1[i + gap]) swap(arr1[i], arr1[i + gap]); 
for (j = gap > n ? gap - n : 0; i < n && j < m; i++, j++)  
if (arr1[i] > arr2[j]) swap(arr1[i], arr2[j]);   
if (j < m) {   for (j = 0; j + gap < m; j++)   if (arr2[j] > arr2[j + gap])
swap(arr2[j], arr2[j + gap]);   }   }  }
};
