// for N/2 majority elements
class Solution {
public:
    int majorityElement(vector<int>& nums) {
       int e=0;
        int count=0;
        for(auto i:nums)
        {
            if(count==0) e=i;
            if(i==e)
            {
                count++;
            }
            else
                count--;
        }
        return e;
    }
};



// For N/3 Majority Elements
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int num1=-1,num2=-1,c1=0,c2=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==num1) c1++;
            else if(nums[i]==num2) c2++;
            else if(c1==0) 
            {
                num1=nums[i];
                c1=1;
            }
            else if(c2==0)
            {
                num2=nums[i];
                c2=1;
            }
            else 
            {
                c1--;
                c2--;
            }
        }
        vector<int>ans;
        c1=c2=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==num1) c1++;
            else if(nums[i]==num2) c2++;
        }
        if(c1>n/3) ans.push_back(num1);
        if(c2>n/3) ans.push_back(num2);
        return ans;
    }
};



// If single Majority element does not exist



  int find(int a[],int size)
    {
        int num;
    int count=0;
    for(int i=0;i<size;i++)
    {
        if(count==0) {num=a[i];}
        if(a[i]==num) count++;
        else count--;
    }
     return num;
    }
    bool isMajority(int a[],int N,int cand)
    {
        int count=0;
        for(int i=0;i<N;i++)
        {
            if(a[i]==cand) count++;
        }
        if(count>N/2) return true;
        return false;
    }
    int majorityElement(int a[], int size)
    {
        
    int cand=find(a,size);
          if (isMajority(a, size, cand))  return cand;
         else return -1;
    }
