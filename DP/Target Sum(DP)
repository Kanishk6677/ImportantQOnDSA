// Memoization
 bool f(int i,int target,vector<int> &arr,vector<vector<int>>&dp)
    {
        if(target==0) return true;
        if(i==0) return (target==arr[i]);
     if(dp[i][target]!=-1) return dp[i][target];
        bool np=f(i-1,target,arr,dp);
        bool p=false;
        if(target>=arr[i])
        {
            p=f(i-1,target-arr[i],arr,dp);
        }
        return dp[i][target]=np || p;
    }

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>>dp(n,vector<int>(k+1,-1));
   return f(n-1,k,arr,dp);
}







class Solution {
public:
    int subset(vector<int>&nums,int n,int M)
       {
        int t[10000][10000];
        
        for(int i = 0; i <= n; i++)
        {
            for(int j = 0; j <= M; j++)
            {
                if(i == 0)
                    t[i][j] = 0;
                if(j == 0)
                    t[i][j] = 1;
            }
        }
        
        for(int i = 1; i <= n; i++)
        {
            for(int j = 0; j <= M; j++)
            {
                if(nums[i - 1] <= j)
                 t[i][j] = t[i - 1][j - nums[i - 1]] + t[i - 1][j];
                else
                  t[i][j] = t[i - 1][j];
            }
        }
        
        return t[n][M];
    }
    
    int findTargetSumWays(vector<int>& nums, int target) {
         int n = nums.size();
         int sum = 0;
         for(int i = 0; i < n; i++)
             sum += nums[i];
         int M = (sum + target)/2;
        if(sum<target||(sum+target)%2!=0)
            return 0;
        else
            return subset(nums,n,M);
    }
};
