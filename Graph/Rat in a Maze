vector<string>v;
class Solution{
    public:
   
    
    void dfs(int i,int j,string s,vector<vector<int>>&m,int n,vector<vector<int>>&vis)
    {
       
        if(m[i][j]==0 or vis[i][j]==1) return;
        if(i==n-1 and j==n-1){
            v.push_back(s);
            return;
        }
        vis[i][j]=1;
        if(i>0)dfs(i-1,j,s+'U',m,n,vis);
        if(i<n-1)dfs(i+1,j,s+'D',m,n,vis);
        if(j>0)dfs(i,j-1,s+'L',m,n,vis);
        if(j<n-1)dfs(i,j+1,s+'R',m,n,vis);
        vis[i][j]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        v.clear();
        vector<vector<int>>vis(5,vector<int>(5,0));
        if(m[0][0]==0) return v;
        if(m[n-1][n-1]==0) return v;
        string s="";
        dfs(0,0,s,m,n,vis);
        sort(v.begin(),v.end());
        return v;
    }
    
};
