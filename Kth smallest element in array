// 1st Approach(Time Complexity-nlogn)
class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
    sort(arr,arr+r+1);
    return arr[k-1];
    
    
        }
};

// 2nd Approach-->Time Complexity(O(n))
priority_queue<int,vector<int>,greater<int>>p;
for(int i=0;i<n;i++)
{
p.push(arr[i]);
}
int ans,i=1;
while(!p.empty())
{

if(i==k)
{
ans=p.top();
break;
}
i++;
p.pop();
}
cout<<ans<<endl;
